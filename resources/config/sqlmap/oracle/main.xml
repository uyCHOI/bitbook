<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.bitbook.mapper.MainMapper">

	<resultMap id="searchFriendsMap" type="searchFriends">
		<result column="mem_name" property="memName" />
		<result column="mem_no" property="memNo" />
		<result column="friends_no" property="friendsNo" />
		<result column="login" property="login" />
		<result column="profile_path" property="profilePath" />
		<result column="logout_date" property="logoutDate" />		
	</resultMap>
	
	<resultMap id="likeCommentMap" type="likeComment">
		<result column="comment_no" property="commentNo" />
		<result column="mem_no" property="memNo" />
		<result column="comment_like_date" property="commentLikeDate" />
		<result column="upAndDown" property="upAndDown" />
	</resultMap>
	
	<resultMap id="likePostMap" type="likePost">
		<result column="post_no" property="postNo" />
		<result column="mem_no" property="memNo" />
		<result column="post_like_date" property="postLikeDate" />
		<result column="upAndDown" property="upAndDown" />
	</resultMap>
	
	<resultMap id="commentMap" type="comment">
		<result column="comment_no" property="commentNo" />
		<result column="post_no" property="postNo" />
		<result column="mem_no" property="memNo" />
		<result column="comment_content" property="commentContent" />
		<result column="comment_l_count" property="commentLCount" />
		<result column="comment_reg_date" property="commentRegDate" />
		<result column="mem_name" property="memName" />		
		<result column="profile_path" property="profilePath" />
		<result column="post_c_count" property="postCCount" />  
	</resultMap>
	
	<resultMap id="postMap" type="post">
		<result column="post_no" property="postNo" />
		<result column="mem_no" property="memNo" />
		<result column="post_content" property="postContent" />
		<result column="post_reg_date" property="postRegDate" />
		<result column="post_open_range" property="postOpenRange" />
		<result column="file_group_no" property="fileGroupNo" />		
		<result column="post_c_count" property="postCCount" />		
		<result column="post_l_count" property="postLCount" />	
		<result column="mem_name" property="memName" />	
		<result column="profile_path" property="profilePath" />	
		
		<collection property="fileUpload" column="file_group_no" 
		            select="selectPostFile"/>   
		<collection property="postTag" column="post_no" 
		            select="selectPostTag"/>   
		            
	</resultMap>
	
	<resultMap id="postTagMap" type="postTag">
		<result column="post_no" property="postNo" />
		<result column="mem_no" property="memNo" />	
		<result column="mem_name" property="memName" />	
	</resultMap>
	
	
	<select id="selectPostByNo" parameterType="int" resultMap="postMap" flushCache="true" useCache="false">
		select p.*,mem_name,profile_path
		  from tb_post p
		 inner join tb_member m
		    on p.mem_no = m.mem_no
		 where p.post_no = #{postNo}
	</select>

	<select id="selectPost" parameterType="post" resultMap="postMap" flushCache="true" useCache="false">
		select p.*,mem_name,profile_path
		  from tb_post p
		 inner join tb_member m
		    on p.mem_no = m.mem_no
		 where 
		 <if test="search != ''">
		 	(post_content like '%'||#{search}||'%'
		    	or mem_name like '%'||#{search}||'%')
           and 
		 </if>
            <choose>
                 <when test="searchType == '1'">
                           post_open_range=1 
        				or post_open_range=2
           			   and p.mem_no in (select friends_no
	              					   	  from tb_friends
	              					   	 where mem_no = #{memNo}
	              					   	   and acc_state = 'A'
         					   	 		)
         			   or post_open_range=3
         			   and p.mem_no = #{memNo}
                 </when>
                 <when test="searchType == '2'">
                 		           post_open_range != 3
       						   and p.mem_no in (select friends_no
                          						  from tb_friends
    					   		     			 where mem_no = #{memNo}
    					   			     		   and acc_state = 'A'
    					   	  					)
                 </when>
                 <when test="searchType == '3'">
                        p.mem_no = #{memNo}
                 </when>
        	</choose>
		   			     		
    		<choose>
    			 <when test="order == '1'">
    		     	 	order by post_no desc
                 </when>
    			 <when test="order == '2'">
    		     	 	order by post_l_count desc
                 </when>
                 <otherwise>
                        order by post_c_count desc
                 </otherwise>
        	</choose>

	</select>
	
	<resultMap id="fileUploadMap" type="fileUpload">
		<result column="file_group_no" property="fileGroupNo" />
		<result column="mem_no" property="memNo" />
		<result column="file_no" property="fileNo" />
		<result column="file_path" property="filePath" />
		<result column="ori_name" property="oriName" />
		<result column="system_name" property="systemName" />		
		<result column="file_type" property="fileType" />		
	</resultMap>
	
	
	<select id="selectPostFile" parameterType="int" resultMap="fileUploadMap">
		select *
		  from tb_file
		 where file_group_no = #{fileGroupNo}
	</select>
	<select id="selectPostTag" parameterType="int" resultMap="postTagMap">
		select t.post_no, t.mem_no, m.mem_name
		  from tb_post_tag t
		 inner join tb_member m
		    on t.mem_no = m.mem_no
		 where t.post_no = #{postNo}
	</select>

	
	
	

	
	
	<select id="searchMyFriends" resultMap="searchFriendsMap" parameterType="searchFriends">
 	 select mem_name, friends_no, login, profile_path, logout_date, m.mem_no
	  from tb_friends f
	 inner join tb_member m
	    on f.friends_no = m.mem_no
	 where f.mem_no = #{memNo}
	   and m.mem_name like '%'||#{memName}||'%'
	   and f.acc_state = 'A'
	 order by login 
 	</select>
 	
	
	<insert id="insertPost" parameterType="post">
		<selectKey keyProperty="postNo" resultType="int" order="BEFORE">
 		select s_post_no.nextval from dual
 		</selectKey>
 	insert into tb_post(
 		post_no,
 		mem_no,
 		post_content,
 		post_open_range
 	)values(
 		#{postNo},
 		#{memNo},
 		#{postContent},
 		#{postOpenRange}
 	)
	</insert>
	
	<insert id="insertPostAddFile" parameterType="post">
	 	<selectKey keyProperty="postNo" resultType="int" order="BEFORE">
 		select s_post_no.nextval from dual
 		</selectKey>
 	insert into tb_post(
 		post_no,
 		mem_no,
 		post_content,
 		post_open_range,
 		file_group_no
 	)values(
 		#{postNo},
 		#{memNo},
 		#{postContent},
 		#{postOpenRange},
 		#{fileGroupNo}
 	)
	</insert>
	
		
	<delete id="deletePostTag" parameterType="int">
		delete
		  from tb_post_tag
		 where post_no = #{postNo}
	</delete>
	
	<insert id="insertPostTag" parameterType="postTag">
		insert into tb_post_tag(
			post_no,
 			mem_no
		)values(
	 		#{postNo},
	 		#{memNo}
 		)
	</insert>
	
	
	<insert id="insertComment" parameterType="comment">
		insert into tb_comment(
			comment_no,
			post_no,
 			mem_no,
 			comment_content
		)values(
	 		s_comment_no.nextval,
	 		#{postNo},
	 		#{memNo},
	 		#{commentContent}
 		)
	</insert>
	 <update id="updatePostCCount" parameterType="comment">
 	update tb_post
 	    	<choose>
    			 <when test="commentNo == 0">
    		     	 	set post_c_count = post_c_count+1
                 </when>
                 <otherwise>
                        set post_c_count = post_c_count-1
                 </otherwise>
        	</choose>
     where post_no = #{postNo}
 	</update>
 	<select id="selectCommentList" parameterType="int" resultMap="commentMap">
 	      select p.post_c_count,
	             m.mem_name,
	             m.profile_path,
	             c.*
	        from tb_comment c
	       inner join tb_member m
	          on c.mem_no = m.mem_no
	       inner join tb_post p
	          on c.post_no = p.post_no
	       where c.post_no = #{postNo}
	       order by c.comment_no desc
 	</select>
	
	<delete id="deleteLikeCommentAll" parameterType="comment">
		delete 
		  from tb_like_comment
		 where comment_no = #{commentNo}
	</delete>
	<delete id="deleteCommentNo" parameterType="comment">
		delete
		  from tb_comment
		 where comment_no = #{commentNo}
	</delete>
	
	<update id="updateComment" parameterType="comment">
 	update tb_comment
       set comment_content = #{commentContent}
     where comment_no = #{commentNo}
 	</update>
	
	<insert id="insertLikeComment" parameterType="likeComment">
		insert into tb_like_comment(
			comment_no,
 			mem_no
		)values(
	 		#{commentNo},
	 		#{memNo}
 		)
	</insert>
	<delete id="deleteLikeComment" parameterType="likeComment">
		delete
		  from tb_like_comment
		 where comment_no = #{commentNo}
		   and mem_no = #{memNo}
	</delete>
	<select id="selectLikeComment" parameterType="likeComment" resultMap="likeCommentMap">
		select *
		  from tb_like_comment
		 where mem_no = #{memNo}
		   and comment_no = #{commentNo}
	</select>
	
	<update id="updateCommentLCount" parameterType="likeComment">
 	update tb_comment
 	    	<choose>
    			 <when test="upAndDown == -1">
    		     	 	set comment_l_count = comment_l_count -1
                 </when>
                 <otherwise>
                        set comment_l_count = comment_l_count +1
                 </otherwise>
        	</choose>
     where comment_no = #{commentNo}
 	</update>
	
	
	
	
	
	<insert id="insertLikePost" parameterType="likePost">
		insert into tb_like_post(
			post_no,
 			mem_no
		)values(
	 		#{postNo},
	 		#{memNo}
 		)
	</insert>
	<delete id="deleteLikePost" parameterType="likePost">
		delete
		  from tb_like_post
		 where post_no = #{postNo}
		   and mem_no = #{memNo}
	</delete>
	<select id="selectLikePost" parameterType="likePost" resultMap="likePostMap">
		select *
		  from tb_like_post
		 where mem_no = #{memNo}
		   and post_no = #{postNo}
	</select>
	
	<update id="updatePostLCount" parameterType="likePost">
 	update tb_post
 	    	<choose>
    			 <when test="upAndDown == -1">
    		     	 	set post_l_count = post_l_count -1
                 </when>
                 <otherwise>
                        set post_l_count = post_l_count +1
                 </otherwise>
        	</choose>
     where post_no = #{postNo}
 	</update>
	
	
	<delete id="deleteLikePostAll" parameterType="int">
		delete
		  from tb_like_post
		 where post_no = #{postNo}
	</delete>
	<delete id="deleteLikeCommentAllForPost" parameterType="int">
		delete
		  from tb_like_comment
		 where comment_no in (select comment_no
		 						from tb_comment
		 					   where post_no = #{postNo}
							 )
	</delete>
	<delete id="deleteCommentAll" parameterType="int">
		delete
		  from tb_comment
		 where post_no = #{postNo}
	</delete>
	<delete id="deletePost" parameterType="int">
		delete
		  from tb_post
		 where post_no = #{postNo}
	</delete>
	<delete id="deletePostTagForPost" parameterType="int">
		delete
		  from tb_post_tag
		 where post_no = #{postNo}
	</delete>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<resultMap id="notificationMap" type="notification">
      <result column="NOT_NO" property="notNo" />
      <result column="mem_no" property="memNo" />
      <result column="NOT_TYPE" property="notType" />
      <result column="NOT_DATE" property="notRegDate" />
      <result column="NOT_STATE" property="notState" />
      <result column="REQ_MEM_NO" property="reqMemNo" />
      <result column="NOT_MESSAGE" property="notMessage" />
      <result column="NOT_READ_DATE" property="notReadDate" />
      <result column="REQ_NO" property="reqNo" />
      <result column="PROFILE_PATH" property="profilePath" />
      <result column="mem_name" property="memName" />
      <result column="login" property="login" />
   </resultMap>
	
	
	
	
	
	<insert id="insertNotification" parameterType="notification">
	    insert into tb_notification(
   			 not_no,
   			 mem_no,
   			 req_mem_no,
   			 req_no,
   			 not_type,
   			 not_message
   			)values(
   			s_not_no.nextval,
   			<choose>
    			 <when test="memNo == 0">
    		     (select mem_no
   			  	    from tb_post
   			 	   where post_no = #{reqNo}
   			     ),
                 </when>
				<otherwise>
					#{memNo},
				</otherwise>
            </choose>
   			#{reqMemNo},
   			#{reqNo},
   			 <choose>
    			 <when test="searchType == 1">
    		     	 	'친구를',
   						'요청하였습니다.'
                 </when>
    			 <when test="searchType == 2">
    		     	 	'게시글에',
   						'태그하였습니다.'
                 </when>
                 <when test="searchType == 3">
    		     	 	'게시글을',
   						'좋아합니다.'
                 </when>
                 <when test="searchType == 4">
    		     	 	'게시글에 댓글을',
   						'남겼습니다.'
                 </when>
                 <when test="searchType == 5">
    		     	 	'댓글을',
   						'좋아합니다.'
                 </when>
        	</choose>
   			)
	</insert>
	
	<!-- 덧글 좋아요 알림 보내기 -->
	<insert id="insertNotificationByLikeComment" parameterType="notification">
	    insert into tb_notification(
   			 not_no,
   			 mem_no,
   			 req_mem_no,
   			 req_no,
   			 not_type,
   			 not_message
   			)values(
   			s_not_no.nextval,
			(select mem_no
			   from tb_comment
			  where comment_no = #{reqNo}
			),
			#{reqMemNo},
			(select post_no
			   from tb_comment
			  where comment_no = #{reqNo}
			),
			'댓글을',
   			'좋아합니다.'
   			)
	</insert>
	
	
	<update id="updateNotification" parameterType="notification">
 	update tb_notification
       set not_state = 'D'
     where not_type = <choose>
    			 <when test="notType == 1">
    		     	 	'친구를'
                 </when>
    			 <when test="notType == 2">
    		     	 	'게시글에'
                 </when>
                 <when test="notType == 3">
    		     	 	'게시글을'
                 </when>
                 <when test="notType == 4">
    		     	 	'게시글에 댓글을'
                 </when>
                 <when test="notType == 5">
    		     	 	'댓글을'
                 </when>
        	</choose>
       and mem_no = (select mem_no
   			   		   from tb_post
   			  		  where post_no = #{reqNo}
   			  		)
   	   and req_no = #{reqNo}
   	   and req_Mem_No = #{reqMemNo}
 	</update>
	
</mapper>

















